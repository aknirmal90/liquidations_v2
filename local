#!/usr/bin/env python3


import os
import subprocess
import sys
import time

import click


def get_doppler_token() -> str:
    """
    Retrieve a Doppler token. First checks environment variable, then falls back to CLI.
    Returns an empty string if unable to fetch.
    """
    # First check if token is in environment
    token = os.environ.get('DOPPLER_TOKEN', '')
    if token:
        return token

    # Fall back to CLI method
    try:
        result = subprocess.run(
            ["doppler", "configs", "tokens", "create", "ephemeral-token", "--plain", "--max-age", "12h"],
            check=True,
            capture_output=True,
            text=True
        )
        token = result.stdout.strip()
        return token
    except subprocess.CalledProcessError as e:
        click.echo(f"Error retrieving Doppler token: {e}")
        return ""


def get_docker_container_id(name_filter: str) -> str:
    """
    Finds the container ID of a running container whose name matches the provided filter.
    Returns an empty string if no container is found.
    """
    try:
        result = subprocess.run(
            ["docker", "ps", "--filter", f"name={name_filter}", "--format", "{{.ID}}"],
            check=True,
            capture_output=True,
            text=True
        )
        container_ids = result.stdout.strip()
        return container_ids
    except subprocess.CalledProcessError as e:
        click.echo(f"Error retrieving Docker container ID: {e}")
        return ""


@click.group()
def cli():
    """A unified CLI to manage local Docker-based dev environment."""
    pass


@cli.command()
def bash():
    """
    Executes a bash shell in a Docker container whose name includes 'webserver'.
    """
    container_id = get_docker_container_id("webserver")
    if not container_id:
        click.echo("No container with 'webserver' in the name is running. Please run 'start'.")
        sys.exit(1)

    click.echo(f"Running bash in container: {container_id}")
    subprocess.run(["docker", "exec", "-it", container_id, "doppler", "run", "--command", "/bin/bash"], check=False)


@cli.command()
def shell():
    """
    Executes python manage.py shell in a Docker container whose name includes 'webserver'.
    """
    container_id = get_docker_container_id("webserver")
    if not container_id:
        click.echo("No container with 'webserver' in the name is running. Please run 'start'.")
        sys.exit(1)

    click.echo(f"Running django shell in container: {container_id}")
    subprocess.run(
        ["docker", "exec", "-it", container_id, "doppler", "run", "--command", "python manage.py shell"],
        check=False
    )


@cli.command()
@click.argument('service', required=False)
def start(service):
    """
    Starts the local environment. If service is specified, only starts that service.
    If services are already running, stops them first.
    """
    doppler_token = get_doppler_token()
    if not doppler_token:
        click.echo("Doppler token could not be retrieved.")
        sys.exit(1)

    # Pass the token as an environment variable to docker-compose
    env = os.environ.copy()
    env["DOPPLER_TOKEN"] = doppler_token

    if service:
        # Stop the service if it's running
        subprocess.run(["docker-compose", "stop", service], env=env, check=False)
        click.echo(f"Starting {service}...")
        subprocess.run(["docker-compose", "up", "-d", "--build", service], env=env, check=False)
    else:
        # Stop all services if they're running
        subprocess.run(["docker-compose", "down"], env=env, check=False)
        click.echo("Starting all services...")
        subprocess.run(["docker-compose", "up", "--build"], env=env, check=False)


@cli.command()
@click.argument('service', required=False)
def stop(service):
    """
    Stops services. If service is specified, only stops that service.
    Otherwise stops all services.
    """
    # We don't need the Doppler token for stopping services since we're not starting anything
    # This avoids the DOPPLER_TOKEN warning
    if service:
        click.echo(f"Stopping {service}...")
        subprocess.run(["docker-compose", "stop", service], check=False)
    else:
        click.echo("Stopping all services...")
        subprocess.run(["docker-compose", "down"], check=False)


@cli.command()
def attach():
    """
    Attaches to a container with 'webserver' in its name.
    """
    container_id = get_docker_container_id("webserver")
    if not container_id:
        click.echo("No container with 'webserver' in the name is running. Please run 'start'.")
        sys.exit(1)

    click.echo(f"Attaching to container: {container_id}")
    subprocess.run(["docker", "attach", container_id], check=False)


@cli.command()
@click.argument('test_path', required=False)
@click.option('--junit-xml', help='Path to store JUnit XML test results')
def test(test_path, junit_xml):
    """
    Runs pytest with coverage in the webserver container using Doppler.
    If test_path is specified, only runs tests in that path.
    """
    container_id = get_docker_container_id("webserver")
    if not container_id:
        click.echo("No webserver container found. Starting services...")
        # Start services in background with -d flag
        subprocess.Popen(["./local", "start"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # Wait for services to come up
        max_attempts = 30
        attempt = 0
        while attempt < max_attempts:
            container_id = get_docker_container_id("webserver")
            if container_id:
                break
            time.sleep(5)
            attempt += 1

        if not container_id:
            click.echo("Webserver container failed to start after 60 seconds")
            sys.exit(1)

    click.echo("Running tests in webserver container...")
    # Remove -it flags for non-interactive environments
    cmd = "pytest -v"
    if test_path:
        cmd = f"{cmd} {test_path}"
    if junit_xml:
        cmd = f"{cmd} --junit-xml={junit_xml}"

    # Add --no-tty flag for CI environments
    subprocess.run(["docker", "exec", container_id, "doppler", "run", "--command", cmd], check=False)


if __name__ == "__main__":
    cli()
