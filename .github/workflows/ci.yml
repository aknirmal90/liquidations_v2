name: CI

on:
  push:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: cimg/python:3.9
      options: --user root # Run container with root privileges to access Docker socket

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y curl

          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Install Doppler CLI
          (curl -Ls --tlsv1.2 --proto "=https" --retry 3 https://cli.doppler.com/install.sh || wget -t 3 -qO- https://cli.doppler.com/install.sh) | sh

      - name: Run Tests with Coverage
        run: |
          # Start services and wait for readiness
          docker-compose \
            -f docker-compose-circleci.yml \
            up \
            -d \
            -e DOPPLER_TOKEN=${{ vars.DOPPLER_TOKEN }}

          docker-compose \
            -f docker-compose-circleci.yml \
            run \
            --rm \
            webserver \
            doppler \
            run \
            --token=${{ vars.DOPPLER_TOKEN }} \
            --command "pytest \
              --junitxml=junit/test-results.xml \
              --cov=app \
              --cov-report=xml:coverage.xml \
              --cov-report=html:coverage-report"
        env:
          DOPPLER_TOKEN: ${{ vars.DOPPLER_TOKEN }}

      - name: Store Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            junit/test-results.xml
            coverage.xml

      - name: Store Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-report
